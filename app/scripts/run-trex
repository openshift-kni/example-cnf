#!/usr/bin/env python3

# https://github.com/secdev/scapy/blob/master/scapy/layers/l2.py#L164

import os
import sys
sys.path.append(os.path.abspath("/opt/pyfiles/"))

from trex.stl.api import *

import subprocess
import signal
import time
import json
import queue
from threading import Thread
from datetime import datetime

# Internal python files - /opt/pyfiles/
from logger import CustomLogger, log
import trexmac
import trexevent
import trexstats

clog = CustomLogger("debug")


class STLS1_Wrapper(object):
    def __init__ (self, ports, size, rate, duration=-1, verbose="debug"):
        # 'direct' or 'lb' mode
        self.mode = os.getenv('MODE', 'direct')
        # profile file path (absolute path), default is /opt/pyfiles/default.py
        self.profile = os.environ.get("profile", "/opt/pyfiles/default.py")
        self.server_url = os.environ.get("server_url", "localhost")
        self.client = STLClient(verbose_level=verbose, logger=clog, server=self.server_url)
        self.force_exit = False
        self.ports = ports
        self.port_a = ports[0]
        self.port_b = ports[1]
        self.rate = rate
        self.duration = duration
        self.queue = queue.Queue(maxsize=0)
        signal.signal(signal.SIGINT, self.signal_handler)

    def start_stats_monitor(self):
        self.process = Thread(target=trexstats.watch, args=[self.client, self.ports])
        self.process.start()

    def init_streams(self):
        profile_a = STLProfile.load_py(self.profile, direction=0)
        profile_b = STLProfile.load_py(self.profile, direction=1)
        stream_a = profile_a.get_streams()
        stream_b = profile_b.get_streams()

        self.client.add_streams(stream_a, self.ports[0])
        self.client.add_streams(stream_b, self.ports[1])

    def simple_burst(self):
        passed = True
        try:
            # connect to server
            self.client.connect()

            # prepare our ports
            self.client.reset(ports = self.ports)

            self.init_streams()

            # clear the stats before injecting
            self.client.clear_stats()

            # here we multiply the traffic lineaer to whatever given in rate
            log.info("Running {:} on ports {:}, {:} for {:} seconds...".format(
                self.rate, self.port_a, self.port_b, self.duration))

            self.client.start(ports = self.ports, mult = self.rate,
                duration = self.duration, core_mask = STLClient.CORE_MASK_PIN)

            # post started event
            trexstats.started()

            # start monitory thread to post stats
            self.start_stats_monitor()

            # block until done
            self.client.wait_on_traffic(ports=self.ports)

            trexstats.force_exit = True

            # read the stats after the test
            stats = self.client.get_stats()
            warnings = self.client.get_warnings()
            passed = trexstats.completed_stats(stats, warnings, self.port_a, self.port_b)

        except STLError as e:
            passed = False
            trexstats.force_exit = True
            log.info(e)

        finally:
            self.force_exit = True
            self.client.disconnect()

        if passed:
            print("\nTest has passed :-)\n")
        else:
            print("\nTest has failed :-(\n")

    def signal_handler(self, sig, frame):
        log.info('You pressed Ctrl+C!')
        trexstats.force_exit = True
        self.client.reset(ports = self.ports)
        self.force_exit = True
        clog.force_exit = True


def main():
    # run the tests
    packet_size = os.getenv("PACKET_SIZE") or os.getenv("packet_size") or 64
    packet_rate = os.getenv("PACKET_RATE") or os.getenv("packet_rate") or "10pps"
    duration = os.getenv("DURATION") or os.getenv("duration") or -1
    if duration != -1:
        duration = int(duration)
    log.info("Starting burst...")
    log.info("Packet Size - %s" % packet_size)
    log.info("Packet Rate - %s" % packet_rate)
    if duration == -1:
        log.info("Packets will be generated forever...")
    try:
        obj = STLS1_Wrapper(ports = [0, 1], size=packet_size, rate=packet_rate, duration=duration)
        obj.simple_burst()
    except Exception as e:
        log.exception("failed to start burst: %s" % e)

if __name__ == "__main__":
    main()
