#!/usr/bin/env python3

# Work In Progress
# It is currently invoked via preStop hook

import os
import sys
import time
import subprocess
import logging
from kubernetes import client, config
from kubernetes.client.rest import ApiException

logging.basicConfig(filename='/var/log/testpmd/check-wait.log', level=logging.DEBUG, format='%(asctime)s: %(message)s')
LOG = logging.getLogger(__name__)

def main():
    LOG.info("check wait invoked")
    # check if CR still exists for testpmd
    if testpmd_cr_exists():
        wait_for_new_testpmdmac()

def wait_for_new_testpmdmac():
    group = "examplecnf.openshift.io"
    version = "v1"
    namespace = "example-cnf"
    plural = "testpmdmacs"

    config.load_incluster_config()
    custom_api = client.CustomObjectsApi()

    hostname = os.environ['HOSTNAME']

    count = 120
    while count > 0:
        try:
            cr_list = custom_api.list_namespaced_custom_object(group, version, namespace, plural)
        except ApiException as e:
            LOG.info("ERROR: list_namespaced_custom_object: Exception: %s" % e)
            return
        new_mac_cr_count = 0
        for item in cr_list['items']:
            if item['metadata']['name'] != hostname:
                new_mac_cr_count += 1
        if new_mac_cr_count > 0:
            LOG.info("New testpmdmac cr found, exit old application")
            return

        time.sleep(5)
        LOG.info("still waiting for new testpmdmac cr creation (%s)..." % count)
        count -= 1


def testpmd_cr_exists():
    group = "examplecnf.openshift.io"
    version = "v1"
    namespace = "example-cnf"
    plural = "testpmds"

    config.load_incluster_config()
    custom_api = client.CustomObjectsApi()

    hostname = os.environ['HOSTNAME']
    cr_name = os.environ.get('CR_NAME') or "testpmd"

    try:
        custom_api.get_namespaced_custom_object(group, version, namespace, plural, cr_name)
        LOG.info("testpmd cr is present")
        return True
    except ApiException as e:
        pass

    LOG.info("testpmd cr is not found")
    return False

if __name__ == '__main__':
    main()
