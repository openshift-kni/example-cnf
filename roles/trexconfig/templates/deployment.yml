kind: Deployment
apiVersion: apps/v1
metadata:
  name: "{{ ansible_operator_meta.name }}-app"
  namespace: "{{ ansible_operator_meta.namespace }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      example-cnf-type: pkt-gen
  template:
    metadata:
      annotations:
        k8s.v1.cni.cncf.io/networks: |
          [
{% for network in networks %}
{% set outer_loop = loop %}
{% for count in range(network.count) %}
            {
              "name": "{{ network.name }}",
{% if network.mac|default([])|length == network.count %}
              "mac": "{{ network.mac[loop.index - 1] }}",
{% endif %}
              "namespace": "{{ ansible_operator_meta.namespace }}"
            }{% if loop.index < network.count or outer_loop.index < network_name_list|length %},{% endif %}
{% endfor %}
{% endfor %}
          ]
      labels:
        example-cnf-type: pkt-gen
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: example-cnf-type
                operator: In
                values:
                - lb-app
{% if not enable_lb|bool %}
                - cnf-app
{% endif %}
            topologyKey: kubernetes.io/hostname
      containers:
      - name: trex-server
        command: {{ command }}
        image: "{{ image_server }}"
        imagePullPolicy: "{{ image_pull_policy }}"
        securityContext:
{% if privileged %}
          privileged: true
{% else %}
          capabilities:
            add: ["IPC_LOCK", "NET_ADMIN"]
{% endif %}
        resources:
          limits:
            hugepages-1Gi: {{ hugepage_1gb_count }}
            memory: {{ memory }}
            cpu: {{ cpu }}
{% for key, value in network_resources.items() %}
            {{ key }}: {{ value }}
{% endfor %}
          requests:
            hugepages-1Gi: {{ hugepage_1gb_count }}
            memory: {{ memory }}
            cpu: {{ cpu }}
{% for key, value in network_resources.items() %}
            {{ key }}: {{ value }}
{% endfor %}
        volumeMounts:
        - name: hugepage
          mountPath: /dev/hugepages
        env:
        - name: NETWORK_NAME_LIST
          value: "{{ network_resources.keys()|list|join(',') }}"
        - name: TREX_CPU
          value: "{{ cpu }}"
        - name: MODE
          value: "{{ 'lb' if enable_lb|bool else 'direct' }}"
        - name: LB_MACS
          value: "{{ lb_macs|join(',') }}"
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
{% for key, value in environments.items() %}
        - name: {{ key }}
          value: "{{ value }}"
{% endfor %}
      - name: trex-app
        image: "{{ image_app }}"
        imagePullPolicy: "{{ image_pull_policy }}"
        resources:
          limits:
            memory: "500Mi"
            cpu: 2
        env:
        - name: NETWORK_NAME_LIST
          value: "{{ network_resources.keys()|list|join(',') }}"
        - name: TREX_CPU
          value: "{{ cpu }}"
        - name: MODE
          value: "{{ 'lb' if enable_lb|default(false) else 'direct' }}"
        - name: LB_MACS
          value: "{{ lb_macs|join(',') }}"
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
{% for key, value in environments.items() %}
        - name: {{ key }}
          value: "{{ value }}"
{% endfor %}
      volumes:
      - name: hugepage
        emptyDir:
          medium: HugePages
