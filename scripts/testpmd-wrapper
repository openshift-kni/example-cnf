#!/bin/bash

set -ex

LOG_DIR="/var/log/testpmd"
[ -d $LOG_DIR ] || mkdir -p $LOG_DIR
rm -rf /var/log/testpmd/*

if [ -z NETWORK_NAME_LIST ]; then
    echo "NETWORK_NAME_LIST is empty, exiting.."
    exit 1
fi

PCI=""
IFS=',' read -r -a NETWORK_ARRAY <<< "$NETWORK_NAME_LIST"

for item in "${NETWORK_ARRAY[@]}"; do
    IFS='/' read -r -a RES_ARRAY <<< "$item"
    NAME="PCIDEVICE_OPENSHIFT_IO_${RES_ARRAY[1]^^}"
    if [ -z ${!NAME} ]; then
        echo "Could not find ${NAME} with PCI address, exiting"
        exit 1
    fi
    IFS=',' read -r -a PCI_ARRAY <<< "${!NAME}"
    for pci_item in "${PCI_ARRAY[@]}"; do
        PCI+=" -w ${pci_item} "
    done
done

LCORES=$(cat /sys/fs/cgroup/cpuset/cpuset.cpus)
if [ -z $LCORES ]; then
    echo "Could not find cores, existing.."
    exit 1
fi

CORES_STR=$(expand-cpus)
IFS=',' read -ra CORES_ARR <<< "$CORES_STR"
CORES_SLICE="${CORES_ARR[@]:1}"
CORES_SPACE="${CORES_SLICE[*]}"
LCORES="${CORES_SPACE//${IFS:0:1}/,}"

STATS_PERIOD=${stats_period:=1}
RUN="/usr/local/bin/testpmd-run"
echo "testpmd -l $LCORES $PCI $@ --stats-period ${STATS_PERIOD} --cmdline-file /root/testpmd-runtime-cmds.txt 2>&1 | tee /var/log/testpmd/app.log" > $RUN
chmod +x $RUN

# Fetches mac address from pci using macaddr DPDK custom application
# Mac address is written to tile /tmp/macaddr.txt
# Fetch macaddress before running testpmd to avoid resource busy error
if [ -f /tmp/macaddr.txt ]; then
    rm -f /tmp/macaddr.txt
fi
n=0
until [ "$n" -ge 5 ]; do
   macaddr $PCI && break
   n=$((n+1))
   sleep 1
done

function sig_term() {
    echo $(date +"%F %T,%3N") > /var/log/testpmd/sigterm-received.log
    #sleep 5
    # kill testpmd application
    kill -9 $(ps aux | grep -w stats-period | grep -v grep | awk '{print $2}')
    exit
}
trap sig_term SIGTERM

RUN_APP=${run_app:=1}
if [[ $RUN_APP == "1" ]]; then
    testpmd-pre-configure &
    testpmd-run &
fi

while true; do
    sleep 1
done
#sleep infinity
