#!/usr/bin/env python3

import os
import yaml
import sys
import random
import re

from kubernetes import client, config
from kubernetes.client.rest import ApiException

trex_cfg_template = [{
    "port_limit": 2,
    "version": 2,
    "interfaces": [],
    "port_info": [],
    "c": 0,
    "platform": {
        "master_thread_id": 0,
        "latency_thread_id": 0,
        "dual_if": [{
            "socket": 0,
            "threads": []
        }]
    }
}]

port_obj_l2_template = {
    "dest_mac": "",
    "src_mac": ""
}

CFG_FILE = "/etc/trex_cfg.yaml"

def main():
    cfg = trex_cfg_template.copy()

    # Ports allocated to TRex
    pci_list = get_pci()
    cfg[0]['interfaces'].extend(pci_list)
    cfg[0]['port_limit'] = len(pci_list)

    core_list = cores()
    cfg[0]['c'] = len(core_list) - 2
    cfg[0]['platform']['master_thread_id'] = core_list[0]
    cfg[0]['platform']['latency_thread_id'] = core_list[1]
    cfg[0]['platform']['dual_if'] = []
    for pci in cfg[0]['interfaces']:
        sock = get_pci_sock_info(pci, core_list[2:])
        if not sock:
            print("ERROR: failed to get sock info for pci %s" % pci)
            sys.exit(1)

        match = False
        for item in cfg[0]['platform']['dual_if']:
            if item['socket'] == sock['socket']:
                match = True
                break
        if not match:
            cfg[0]['platform']['dual_if'].append(sock)

    src_mac = get_src_mac()
    if not src_mac:
        print("ERROR: Source mac address is not available, exiting...")
        sys.exit(1)

    dst_mac = get_dst_mac()
    if not dst_mac:
        print("ERROR: Destination mac address is not available, exiting...")
        sys.exit(1)

    if len(dst_mac) != len(src_mac):
        print("ERROR: Source (%s) and Destination (%s) mac list size is "
            "different, exiting..." % (','.join(src_mac), ','.join(dst_mac)))
        sys.exit(1)

    if len(pci_list) != len(src_mac):
        print("ERROR: PCI device list (%s) and Source mac (%s) mac list size is "
            "different, exiting..." % (','.join(pci_list), ','.join(dst_mac)))
        sys.exit(1)

    for idx in range(len(pci_list)):
        port_obj = port_obj_l2_template.copy()
        port_obj['src_mac'] = src_mac[idx]
        port_obj['dest_mac'] = dst_mac[idx]
        cfg[0]['port_info'].append(port_obj)

    print(trex_cfg_template)
    with open(CFG_FILE, "w") as f:
        yaml.safe_dump(cfg, f)

def get_pci_sock_info(pci, core_list):
    pattern_full = r'\b([0-9a-fA-F]{4}:[0-9a-fA-F]{2}:[0-9a-fA-F]{2}.\d{1}\S*)'
    partter_partial = r'\b([0-9a-fA-F]{2}:[0-9a-fA-F]{2}.\d{1}\S*)'
    numa_node = "/sys/bus/pci/devices/"
    if re.match(pattern_full, pci):
        numa_node += pci
    elif re.match(patter_partial, pci):
        numa_node += "0000:" + pci
    else:
        print("ERROR: pci string %s does not match exepected format" % pci)
        return

    numa_node += "/numa_node"
    with open(numa_node) as f:
        sock_num = int(f.read().strip())

    sock_info = {'socket': sock_num, 'threads': []}
    for core in core_list:
        core_sock_num = get_core_sock_num(core)
        if core_sock_num == None:
            print("ERROR: Unable to find sock number for core %s", core)
            return
        elif core_sock_num == sock_num:
            sock_info['threads'].append(core)
    return sock_info

def get_core_sock_num(core):
    files = os.listdir("/sys/devices/system/cpu/cpu" + str(core) + "/")
    pattern = r'node(\d+)'
    for item in files:
        matches = re.match(pattern, item)
        if matches:
            sock = int(matches.group(1))
            return sock

def cores():
    core_string = sys.argv[1]
    core_list = []
    for item in core_string.split(','):
        if '-' in item:
            range_parts = item.split('-')
            for c in range(int(range_parts[0]), int(range_parts[1]) + 1):
                core_list.append(c)
        else:
            core_list.append(int(item))
    return core_list

def get_pci():
    networks = os.environ['NETWORK_NAME_LIST']
    network_list = networks.split(',')
    pci_all = []
    for net in network_list:
        pci_env = "PCIDEVICE_" + net.replace('/', '_').replace('.', '_').upper()
        pcis = os.environ[pci_env]
        print("pcis = %s" % pcis)
        pci_list = pcis.split(',')
        pci_all.extend(pci_list)
    return pci_all

def get_src_mac():
    podinfo = "/etc/podnetinfo/annotations"
    obj = []
    macs = []
    with open(podinfo) as f:
        for line in f:
            name, var = line.partition("=")[::2]
            if name == "k8s.v1.cni.cncf.io/networks":
                obj = yaml.safe_load(yaml.safe_load(var))
    for item in obj:
        print(item)
        if 'mac' in item:
            macs.append(item['mac'])
        else:
            print("TODO: Implement mac fetching DPDK application - workaround")
            mac = [int('fe', 16), int('16', 16),
                   int('3b', 16), random.getrandbits(8),
                   random.getrandbits(8), random.getrandbits(8)]
            macStr = ':'.join(["%02x" % x for x in mac])
            macs.append(macStr)
    return macs

def get_dst_mac():
    group = "examplecnf.openshift.io"
    version = "v1"
    namespace = "example-cnf"
    plural = "testpmdmacs"

    config.load_incluster_config()
    custom_api = client.CustomObjectsApi()
    try:
        response = custom_api.list_namespaced_custom_object(group, version, namespace, plural)
    except ApiException as e:
        return []

    macs = []
    for item in response['items']:
        print(item['spec']['nodename'])
        for resource in item['spec']['resources']:
            for dev in resource['devices']:
                macs.append(dev['mac'])
    return macs

if __name__ == "__main__":
    main()
