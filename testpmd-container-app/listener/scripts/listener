#!/usr/bin/env python3
from kubernetes import client, config, watch
from kubernetes.client.rest import ApiException
import socket
import sys
import os
import time
from threading import Thread
import traceback


def send_lb_data(data):
    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    try:
        sock.connect("/var/lib/testpmd/lb.sock")
    except socket.error as msg:
        print("failed to connect to socket")
        print(msg)
        traceback.print_exc()
        sys.exit(1)
        return

    try:
        print("sending %s" % data);
        sock.sendall(bytearray(data, "utf8"))
    except:
        print("failed to send data to socket")
        traceback.print_exc()
        sys.exit(1)
    finally:
        sock.close();

def main():
    while True:
        try:
            start_watch()
        except ApiException as api_ex:
            print("ERROR: ApiException: \n%s\n-----------------" % api_ex)
        except Exception as ex:
            print("ERROR: Exception: \n%s\n--------------------" % ex)
        time.sleep(5)


def start_watch():
    group = "examplecnf.openshift.io"
    version = "v1"
    namespace = os.environ.get("NAMESPACE", "example-cnf")
    plural = "cnfappmacs"

    if os.path.exists("/var/lib/testpmd/kubeconfig"):
        config.load_kube_config(config_file="/var/lib/testpmd/kubeconfig")
    else:
        config.load_incluster_config()

    custom_api = client.CustomObjectsApi()
    w = watch.Watch()
    for event in w.stream(custom_api.list_namespaced_custom_object,
                          group=group, version=version, plural=plural, namespace=namespace):
        if event['type'] == 'ADDED':
            msg = "1,"
        elif event['type'] == 'DELETED':
            msg = "2,"
        else:
            msg = None

        if msg:
            name = event['object']['metadata']['name']
            for item in event['object']['spec']['resources']:
                for device in item['devices']:
                    msg += device['mac'] + ','
            msg += name + ';'
            send_lb_data(msg)

if __name__ == "__main__":
    main()
