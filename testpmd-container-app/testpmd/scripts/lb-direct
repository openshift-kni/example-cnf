#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--pci", action="store_true", default=False)   
    parser.add_argument("--dutpci", action="store_true", default=False)   
    parser.add_argument("--lcore", action="store_true", default=False)   
    args = parser.parse_args()

    if args.pci:
        pci_list = get_vfio_pcis(4)
        mac = ["60:04:0f:f1:89:01","60:04:0f:f1:89:02","40:04:0f:f1:89:01","40:04:0f:f1:89:02"]
        set_pci_mac(pci_list, mac)
        out = ""
        for pci in pci_list:
            out += "-w " + pci + " "
        print(out)
    elif args.lcore:
        pci_list = get_vfio_pcis(4)
        numa = get_numa_node(pci_list)
        cores = get_cores(numa, 10, 6)
        print(cores)
    elif args.dutpci:
        pci_list = get_vfio_pcis(2)
        out = ""
        for pci in pci_list:
            out += "--dut-pci " + pci + " "
        print(out)
    else:
        sys.exit(1)

def get_vfio_pcis(count):
    dev = []
    dev_lines = subprocess.check_output(["lspci", "-Dvmmnnk"]).splitlines()
    for dev_line in dev_lines:
        line = dev_line.decode("utf8")
        if 'Slot' in line:
            slot = line.split(':', 1)[1].strip()
        if 'vfio-pci' in line:
            dev.append(slot)
    # First 2 are used by trex
    # Only supports VFs from single interface in current implementation
    return dev[2:2+count]

def get_numa_node(pci_list):
    numa_path = "/sys/bus/pci/devices/" + pci_list[0] + "/numa_node"
    with open(numa_path) as f:
        return int(f.read())

def get_cores(numa, start, count):
    path = "/sys/bus/node/devices/node" + str(numa) + "/cpulist"
    with open(path) as f:
        val = f.read().split(',')[start:start+count]
        return ','.join(val)

def set_pci_mac(pci_list, mac):
    idx = -1
    for pci in pci_list:
        idx += 1
        path = "/sys/bus/pci/devices/" + pci + "/physfn/"
        pf = os.path.realpath(path)
        for item in os.listdir(pf + "/net"):
            pf_name = item
        for item in os.listdir(path):
            if os.path.islink(path + item):
                rel = os.path.realpath(path + item)
                if pci in rel:
                    vf = item.replace('virtfn', '')
                    set_vf_mac(pf_name, vf, mac[idx])
    return mac

def set_vf_mac(pf_name, vf, mac):
    subprocess.check_output(["ip", "link", "set", pf_name, "vf", vf, "mac", mac])
    subprocess.check_output(["ip", "link", "set", pf_name, "vf", vf, "trust", "on"])

if __name__ == "__main__":
    main()
