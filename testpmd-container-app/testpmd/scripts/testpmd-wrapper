#!/bin/bash

set -ex

# Start lifecycle webserver in background
/usr/local/bin/webserver 8095 &

RUN_APP=${run_app:=1}

LOG_DIR="/var/log/testpmd"
[ -d $LOG_DIR ] || mkdir -p $LOG_DIR
rm -rf /var/log/testpmd/*

MODE=${MODE:-"fwd"}

if [ -z ${NETWORK_NAME_LIST} ]; then
    if [[ "$MODE" != "lb" ]]; then
        echo "ERROR: NETWORK_NAME_LIST is required."
        exit 1
    fi
    echo "NETWORK_NAME_LIST is empty, lb mode, running directly"
    PCI=$(/usr/local/bin/example-cnf/lb-direct --pci)
    LCORES=$(/usr/local/bin/example-cnf/lb-direct --lcore)
    CNF_PCI=$(/usr/local/bin/example-cnf/lb-direct --dutpci)
else
    PCI=""
    IFS=',' read -r -a NETWORK_ARRAY <<< "$NETWORK_NAME_LIST"
    TESTPMD_ENV="/var/lib/testpmd/env.txt"
    echo "" > $TESTPMD_ENV
    for item in "${NETWORK_ARRAY[@]}"; do
        IFS='/' read -r -a RES_ARRAY <<< "$item"
        NAME="PCIDEVICE_OPENSHIFT_IO_${RES_ARRAY[1]^^}"
        if [ -z ${!NAME} ]; then
            echo "Could not find ${NAME} with PCI address, exiting"
            exit 1
        fi
        echo "${NAME}=${!NAME}" >> $TESTPMD_ENV
        IFS=',' read -r -a PCI_ARRAY <<< "${!NAME}"
        for pci_item in "${PCI_ARRAY[@]}"; do
            PCI+=" -w ${pci_item} "
        done
    done
    
    LCORES=""
    if [ -f /sys/fs/cgroup/cpuset/cpuset.cpus ]; then
        LCORES=$(cat /sys/fs/cgroup/cpuset/cpuset.cpus)
    elif [ -f /sys/fs/cgroup/cpuset.cpus ]; then
        # Applied to latest OCP 4.16 nightlies starting from 4.16.0 ec.5
        LCORES=$(cat /sys/fs/cgroup/cpuset.cpus)
    else
        echo "Could not find file to extract cores, existing.."
        exit 1
    fi

    if [ -z $LCORES ]; then
        echo "Could not find cores, existing.."
        exit 1
    fi
    
    CORES_STR=$(/usr/local/bin/example-cnf/expand-cpus)
    IFS=',' read -ra CORES_ARR <<< "$CORES_STR"
    CORES_LEN=${#CORES_ARR[@]}
    if [[ $CORES_LEN -gt $TESTPMD_CPU_COUNT ]]; then
        echo "ERROR: Acutal cores (${CORES_LEN}) is greater than configured cores (${TESTPMD_CPU_COUNT})"
        exit 1
    fi
    if [[ "$MODE" == "lb" ]]; then
        CNF_PCI=""
        IFS=',' read -r -a NETWORK_ARRAY <<< "$CNF_APP_NETWORK_NAME_LIST"
        for item in "${NETWORK_ARRAY[@]}"; do
            IFS='/' read -r -a RES_ARRAY <<< "$item"
            NAME="PCIDEVICE_OPENSHIFT_IO_${RES_ARRAY[1]^^}"
            if [ -z ${!NAME} ]; then
                echo "Could not find ${NAME} with PCI address, exiting"
                exit 1
            fi
            IFS=',' read -r -a PCI_ARRAY <<< "${!NAME}"
            for pci_item in "${PCI_ARRAY[@]}"; do
                CNF_PCI+=" --dut-pci ${pci_item} "
            done
        done
    fi
fi

STATS_PERIOD=${stats_period:=1}
RUN="/usr/local/bin/example-cnf/testpmd-run"
CMD="/usr/local/bin/example-cnf/testpmd"
CMD="${CMD} -l $LCORES"
CMD="${CMD} $PCI"
CMD="${CMD} $@"
CMD="${CMD} --stats-period ${STATS_PERIOD}"
CMD="${CMD} --cmdline-file /usr/local/bin/example-cnf/testpmd-runtime-cmds.txt"

if [[ "$MODE" == "lb" ]]; then
    CMD="${CMD} --enable-lb "
    CMD="${CMD} ${CNF_PCI} "
fi

CMD="${CMD} 2>&1 | tee /var/log/testpmd/app.log"
echo "${CMD}" > $RUN
chmod +x $RUN

function sig_term() {
    echo $(date +"%F %T,%3N") > /var/log/testpmd/sigterm-received.log
    # kill testpmd application
    kill -9 $(ps aux | grep -w stats-period | grep -v grep | awk '{print $2}')
    exit
}
trap sig_term SIGTERM

if [[ $RUN_APP == "1" ]]; then
    sudo /usr/local/bin/example-cnf/testpmd-run
else
    sleep infinity
fi
