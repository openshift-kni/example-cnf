---
# tasks file for LoadBalancer
- set_fact:
    network_resources: {}
    network_name_list: []
    networks: []

- name: Validate the CPUs and forwarding cores
  fail:
    msg: "{{ forwarding_cores }} should be lesser than {{ cpus }}"
  when: forwarding_cores >= cpu

- name: Check if Packet Generator networks parameter is empty
  fail:
    msg: "packet_generator_networks parameter is empty"
  when: packet_generator_networks|length == 0

- name: Check if CNF App networks parameter is empty
  fail:
    msg: "cnf_app_networks parameter is empty"
  when: cnf_app_networks|length == 0

- name: Merge networks
  set_fact:
    networks: "{{ packet_generator_networks + cnf_app_networks }}"

- name: print networks
  debug:
    var: networks

- name: "Parse CNF App network {{ network_item }}"
  include_tasks: network-parse.yaml
  loop: "{{ cnf_app_networks }}"
  loop_control:
    loop_var: network_item

- name: Set CNF app network resource names
  set_fact:
    cnf_app_network_resources: "{{ network_resources }}"

- name: print cnf_app_network_resources
  debug:
    var: cnf_app_network_resources

- name: Updated network resources after reading cnf_app_networks
  debug:
    var: network_resources

- name: Updated network name list after reading cnf_app_networks
  debug:
    var: network_name_list

- name: "Parse Packet generator network {{ network_item }}"
  include_tasks: network-parse.yaml
  loop: "{{ packet_generator_networks }}"
  loop_control:
    loop_var: network_item

- name: Updated network resources after reading packet_generator_networks
  debug:
    var: network_resources

- name: Updated network name list after reading packet_generator_networks
  debug:
    var: network_name_list

- name: Create ServiceAccount for LoadBalancer resource
  k8s:
    state: present
    definition: "{{ lookup('template', 'service_account.yml') }}"

- name: Create Role for LoadBalancer resource
  k8s:
    state: present
    definition: "{{ lookup('template', 'role.yml') }}"

- name: Create RoleBinding for LoadBalancer resource
  k8s:
    state: present
    definition: "{{ lookup('template', 'role_binding.yml') }}"

- name: Create LoadBalancer deployment
  k8s:
    state: present
    definition: "{{ lookup('template', 'deployment.yml') }}"

# if replica = 1, recommended not to set maxUnavailable to 0 or 0% and minAvailable to 100% for upgrades
# https://github.com/operator-framework/operator-lifecycle-manager/blob/master/doc/design/adding-pod-disruption-budgets.md#limitations-on-pod-disruption-budgets
# TODO (in a new patch): update PDB during upgrades to avoid issues during node draining, something like:
# https://medium.com/@tamber/solution-avoid-kubernetes-openshift-node-drain-failure-due-to-active-poddisruptionbudget-df68efed2c4f
- name: Create PodDisruptionBudget for LoadBalancer pod
  k8s:
    state: present
    definition: "{{ lookup('template', 'pdb.yml') }}"
