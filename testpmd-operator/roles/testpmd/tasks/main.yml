---
- set_fact:
    network_resources: {}
    network_name_list: []

- name: Validate the CPUs and forwarding cores
  fail:
    msg: "{{ forwarding_cores }} should be lesser than {{ cpu }}"
  when: forwarding_cores|int >= cpu|int

- name: print network list
  debug:
    var: networks

- name: print resource list
  debug:
    var: resources

- name: Check if networks parameter is empty
  fail:
    msg: "networks or resources parameter is required"
  when: 
    - networks|length == 0
    - resources|length == 0

- name: initialize eth_peer var
  set_fact:
    eth_peer: ""
- name: construct eth_peer
  set_fact:
    eth_peer: "{{ eth_peer }}{{ idx|string }},{{ item }};"
  loop: "{{ ethpeer_maclist }}"
  loop_control:
    index_var: idx
- name: create configmap with cnf-app run script
  community.kubernetes.k8s:
    name: cnf-run
    namespace: "{{ ansible_operator_meta.namespace }}"
    kind: ConfigMap
    definition:
      data:
        run: |
          {{ lookup('file', 'run') }}

- name: "Parse network"
  include_tasks: network-parse.yaml
  when: networks|default([])|length > 0
  loop: "{{ networks }}"
  loop_control:
    loop_var: network_item

- name: "Parse resources if defined and when sriov network is not defined"
  set_fact: 
    network_resources: "{{ network_resources | combine({item.name: item.count}) }}"
  loop: "{{ resources }}"
  when:
    - networks|default([])|length == 0
    - resources|default([])|length > 0

- name: print network resources map
  debug:
    var: network_resources

- name: MAC workaround block
  when: mac_workaround_enable|bool
  block:
    - name: Set daemonset name fact
      set_fact:
        mac_fix_ds_name: "{{ ansible_operator_meta.name }}-mac-fix-sriov-cni"

    - name: Create DaemonSet for mac workaround of sriov-cni
      community.kubernetes.k8s:
        state: present
        definition: "{{ lookup('template', 'daemonset.yml') }}"

    - name: Check if DaemonSet is completed
      community.kubernetes.k8s_info:
        name: "{{ mac_fix_ds_name }}"
        namespace: "{{ ansible_operator_meta.namespace }}"
        kind: DaemonSet
        api_version: apps/v1
      register: ds_info
    - debug: var=ds_info

    - name: Check if DaemonSet is completed
      community.kubernetes.k8s_info:
        name: "{{ mac_fix_ds_name }}"
        namespace: "{{ ansible_operator_meta.namespace }}"
        kind: DaemonSet
        api_version: apps/v1
      register: ds_info
      retries: 30
      delay: 5
      until:
        - "ds_info.resources|length > 0"
        - "ds_info.resources[0].status.desiredNumberScheduled == ds_info.resources[0].status.numberReady"
      failed_when:
        - "ds_info.resources|length > 0"
        - "ds_info.resources[0].status.desiredNumberScheduled != ds_info.resources[0].status.numberReady"

- name: Create TestPMD deployment
  community.kubernetes.k8s:
    state: present
    definition: "{{ lookup('template', 'deployment.yml') }}"
