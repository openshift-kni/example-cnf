#!/usr/bin/env python3

# https://github.com/secdev/scapy/blob/master/scapy/layers/l2.py#L164

import os
import sys
sys.path.append(os.path.abspath("/opt/pyfiles/"))

from trex.stl.api import *
from trex.common.services.trex_service_arp import ServiceARP
from trex.common.services.trex_service import Service

import signal
import time
from threading import Thread

# Internal python files - /opt/pyfiles/
from logger import CustomLogger, log
import trexmac
import trexstats

clog = CustomLogger("debug")

class STLS1(object):
    def __init__ (self, ports, size, rate, trex_ip_list, cnfapp_ip_list, arp_resolution,
                  profile=None, duration=-1, verbose="debug"):
        self.server_url = os.environ.get("TREX_SERVER_URL", "localhost")
        self.client = STLClient(verbose_level=verbose, logger=clog, server=self.server_url)
        self.fsize = int(size)
        self.profile = profile
        self.trex_ip_list = trex_ip_list
        self.cnfapp_ip_list = cnfapp_ip_list
        self.arp_resolution = arp_resolution
        self.pg_id = 0
        self.num_streams = 1
        self.ports = ports
        self.port_a = ports[0]
        self.port_b = ports[1]
        self.rate = rate
        self.duration = duration
        signal.signal(signal.SIGINT, self.signal_handler)
        self.stats_obj = trexstats.TRexAppStats(ports)

    def start_stats_monitor(self):
        self.process = Thread(target=trexstats.watch, args=[self.client, self.ports])
        self.process.start()

    def create_vm(self, direction=0):
        ip_port_0="18.0.0.1"
        ip_port_1="8.0.0.1"

        # use the IP address extracted from env var if provided
        if len(self.trex_ip_list) > 0:
            ip_port_0=self.trex_ip_list[0]
            ip_port_1=self.trex_ip_list[1]

        # Followed the philosophy of this example:
        # https://github.com/cisco-system-traffic-generator/trex-core/blob/v3.06/scripts/stl/udp_1pkt_simple_bdir.py
        if (direction == 0):
            src = ip_port_0
            dst = ip_port_1
        else:
            src = ip_port_1
            dst = ip_port_0

        vm = [
            # src                                                            (4)
            STLVmFlowVar(name="src",
                         value_list=[src],
                         size=4,op="inc"),
            STLVmWrFlowVar(fv_name="src",pkt_offset= "IP.src"),

            # dst
            STLVmFlowVar(name="dst",
                         value_list=[dst],
                         size=4,op="inc"),
            STLVmWrFlowVar(fv_name="dst",pkt_offset= "IP.dst"),

            # checksum
            STLVmFixIpv4(offset = "IP")
            ]
        return vm

    def create_stream (self, dest_mac=None, port=0):
        size = self.fsize - 4; # HW will add 4 bytes ethernet CRC

        ethr_base = Ether(dst=dest_mac) / IP() / UDP()

        base_len = len(bytes(ethr_base))
        pad = max(0, size - base_len) * 'x'
        vm = self.create_vm(port)
        pkt = STLPktBuilder(pkt=ethr_base/pad, vm=vm)

        streams = []
        for pg_id_add in range(0, self.num_streams):
            streams.append(STLStream(packet = pkt, mode = STLTXCont(pps=1),
                                     flow_stats = STLFlowStats(pg_id = self.pg_id + pg_id_add)))
        return streams

    def add_streams(self, port, dest_mac):
        if dest_mac:
            log.info("create stream for port %s with dest mac %s" % (port, dest_mac))
        new_stream = self.create_stream(dest_mac, port)
        self.client.add_streams(new_stream, [port])

    def init_streams(self):
        macs = trexmac.get_dst_mac()

        if macs:
            log.info("destination macs available")
            for idx in range(0, len(self.ports)):
                self.add_streams(self.ports[idx], macs[idx])
        else:
            log.info("destination macs not available")
            for idx in range(0, len(self.ports)):
                self.add_streams(self.ports[idx], None)

    def run_arp_resolution(self, direction=0):
        ip_port_0="18.0.0.1"
        ip_port_1="8.0.0.1"
        gw_port_0="18.0.0.2"
        gw_port_1="8.0.0.2"

        # use the IP address extracted from env var if provided
        if len(self.trex_ip_list) > 0:
            ip_port_0=self.trex_ip_list[0]
            ip_port_1=self.trex_ip_list[1]

        if len(self.cnfapp_ip_list) > 0:
            gw_port_0=self.cnfapp_ip_list[0]
            gw_port_1=self.cnfapp_ip_list[1]

        # Followed the philosophy of this example:
        # https://github.com/cisco-system-traffic-generator/trex-core/blob/v3.06/scripts/stl/udp_1pkt_simple_bdir.py
        if (direction == 0):
            src = ip_port_0
            gw = gw_port_0
        else:
            src = ip_port_1
            gw = gw_port_1

        try:
            # Firstly enable service mode so that ARP exchange can be done, else TRex will reject the packet
            self.client.set_service_mode(ports=[direction], enabled=True)

            # Create and send the ARP packet
            ctx = self.client.create_service_ctx(port=direction)
            resolv = ServiceARP(
                ctx,
                dst_ip=str(gw),
                src_ip=str(src),
                verbose_level=Service.INFO,
            )
            ctx.run(resolv)

            # Confirm it worked
            record = resolv.get_record()
            if not record:
                raise ValueError(f"gateway IP {gw} not resolved")
            gw_mac = record.dst_mac
            log.info("Retrieved MAC address - %s" % gw_mac)
        finally:
            # Disable service mode, so that it does not impact in performance during testing
            self.client.set_service_mode(ports=[direction], enabled=False)

    def simple_burst(self):
        passed = True
        try:
            # connect to server
            self.client.connect()

            # prepare our ports
            self.client.reset(ports = self.ports)

            # exchange ARP packets so that both endpoints knows how to associate IP-MAC addresses
            if self.arp_resolution == 1:
                log.info("Starting ARP resolution")
                for idx in range(0, len(self.ports)):
                    self.run_arp_resolution(self.ports[idx])
            else:
                log.info("No ARP resolution will be run")

            self.init_streams()

            # clear the stats before injecting
            self.client.clear_stats()

            # here we multiply the traffic lineaer to whatever given in rate
            log.info("Running {:} on ports {:}, {:} for {:} seconds...".format(
                self.rate, self.port_a, self.port_b, self.duration))

            self.client.start(ports = self.ports, mult = self.rate,
                duration = self.duration, core_mask = STLClient.CORE_MASK_PIN)

            trexstats.started(self.profile, self.rate, self.duration)

            # start monitory thread to post stats
            self.start_stats_monitor()

            # block until done, having a timeout that expires after reaching the specified duration (if provided)
            # with some delay waiting after last packet is sent, which is the 10% of the duration.
            if self.duration != -1:
                try:
                    self.client.wait_on_traffic(ports=self.ports, timeout=self.duration,
                                                rx_delay_ms=self.duration*1000/10)
                except TRexTimeoutError as e:
                    log.info("Reached timeout, job will finish")
                    log.info(e)
            else:
                self.client.wait_on_traffic(ports=self.ports)

            trexstats.force_exit = True

            # read the stats after the test
            stats = self.client.get_stats()
            warnings = self.client.get_warnings()
            passed = trexstats.completed_stats(stats, warnings, self.port_a, self.port_b, self.profile,
                                               self.rate, self.duration)

        except STLError as e:
            passed = False
            trexstats.force_exit = True
            log.info(e)

        finally:
            self.client.disconnect()

        if passed:
            print("\nTest has passed :-)\n")
            sys.exit(0)
        else:
            print("\nTest has failed :-(\n")
            sys.exit(1)

    def signal_handler(self, sig, frame):
        log.info('You pressed Ctrl+C!')
        time.sleep(6)
        clog.force_exit = True
        sys.exit(0)


def main():
    log.info("Starting burst...")

    # variable definitions
    packet_size = os.getenv("PACKET_SIZE") or os.getenv("packet_size") or 64
    packet_rate = os.getenv("PACKET_RATE") or os.getenv("packet_rate") or "10pps"
    duration = os.getenv("DURATION") or os.getenv("duration") or -1
    profile = os.environ.get("TREX_PROFILE_NAME")
    raw_trex_ip_list = os.environ.get("trex_ip_list")
    raw_cnfapp_ip_list = os.environ.get("cnfapp_ip_list")
    arp_resolution = int(os.getenv("arp_resolution")) or 0
    trex_ip_list = []
    cnfapp_ip_list = []

    if duration != -1:
        duration = int(duration)
    else:
        log.info("Packets will be generated forever...")

    log.info("Packet Size - %s" % packet_size)
    log.info("Packet Rate - %s" % packet_rate)
    log.info("Job Duration - %s" % duration)

    if profile:
        log.info("TRex profile - %s" % profile)

    # Process the TRex IP lists
    if raw_trex_ip_list:
        processed_trex_ip_list = raw_trex_ip_list.split(',')
        # if we provide IP addresses, then let's include them in the list, else it will be empty
        if processed_trex_ip_list[0] != "":
            for ip in processed_trex_ip_list:
                # and remove network mask
                trex_ip_list.append(ip.split('/')[0])
        log.info("TRex IP list - %s" % trex_ip_list)

    # Process the CNFApp IP lists
    if raw_cnfapp_ip_list:
        processed_cnfapp_ip_list = raw_cnfapp_ip_list.split(',')
        # if we provide IP addresses, then let's include them in the list, else it will be empty
        if processed_cnfapp_ip_list[0] != "":
            for ip in processed_cnfapp_ip_list:
                # and remove network mask
                cnfapp_ip_list.append(ip.split('/')[0])
        log.info("CNFApp IP list - %s" % cnfapp_ip_list)

    # Start the burst
    try:
        obj = STLS1(ports = [0, 1], size=packet_size, rate=packet_rate, duration=duration, profile=profile,
                    trex_ip_list=trex_ip_list, cnfapp_ip_list=cnfapp_ip_list, arp_resolution=arp_resolution)
        obj.simple_burst()
    except Exception as e:
        log.exception("failed to start burst: %s" % e)

if __name__ == "__main__":
    main()
