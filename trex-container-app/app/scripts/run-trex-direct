#!/usr/bin/env python3

# https://github.com/secdev/scapy/blob/master/scapy/layers/l2.py#L164

import os
import sys
sys.path.append(os.path.abspath("/opt/pyfiles/"))

from trex.stl.api import *

import subprocess
import signal
import time
import json
import queue
from threading import Thread
from datetime import datetime

# Internal python files - /opt/pyfiles/
# TODO - uniform the logging
from logger import CustomLogger
clog = CustomLogger("debug")

import trexmac
import trexevent
import trexstats

import logging

# Add UTC timestamp to the logs
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s',
                    datefmt='%Y-%m-%dT%H:%M:%S%z')

logger = logging.getLogger('run-trex-direct')


class STLS1(object):
    def __init__ (self, ports, size, rate, profile=None, duration=-1, verbose="debug"):
        self.server_url = os.environ.get("TREX_SERVER_URL", "localhost")
        self.client = STLClient(verbose_level=verbose, logger=clog, server=self.server_url)
        self.fsize = 64
        self.profile = profile
        self.pg_id = 0
        self.pkt_type = "ether"
        self.num_streams = 1
        self.force_exit = False
        self.ports = ports
        self.port_a = ports[0]
        self.port_b = ports[1]
        self.size =size
        self.rate = rate
        self.duration = duration
        self.queue = queue.Queue(maxsize=0)
        signal.signal(signal.SIGINT, self.signal_handler)
        self.stats_obj = trexstats.TRexAppStats(ports)
        # 'direct' or 'lb' mode
        self.mode = os.getenv('MODE', 'direct')

    def start_stats_monitor(self):
        self.process = Thread(target=trexstats.watch, args=[self.client, self.ports])
        self.process.start()

    def start_watch(self):
        self.watch_mac = Thread(target=trexmac.watch_cr, args=[self.queue])
        self.watch_mac.daemon = True
        self.watch_mac.start()

    def update(self, obj):
        meta = obj['metadata']
        spec = obj['spec']
        logger.info(f"Name({meta['name']}) Namespace({meta['namespace']})")
        macs = self.get_macs(spec)
        if len(macs) < len(self.ports):
            logger.error(f"macs len({len(macs)}) is less then ports len ({len(self.ports)})")
            return

        logger.info("reset ports")
        self.client.reset(ports=self.ports)
        logger.info("create stream with new mac address")
        for idx in range(0, len(self.ports)):
            self.add_streams(self.ports[idx], macs[idx])
        logger.info("staring ports")
        self.client.start(ports=self.ports, mult=self.rate, duration=self.duration, core_mask=STLClient.CORE_MASK_PIN)
        data = {}
        now = datetime.now()
        data['microtime'] = now.strftime('%Y-%m-%dT%H:%M:%S.%fZ')
        data['time'] = now.strftime('%Y-%m-%dT%H:%M:%S.%fZ')
        data['msg'] = ("Packet stream is updated with mac: %s" % ','.join(macs))
        data['reason'] = 'StreamUpdated'
        trexevent.create_event(data)

    def create_vm(self, direction=0):
        ip_range = {'src': {'start': "18.0.0.1", 'end': "18.0.0.254"},
                    'dst': {'start': "8.0.0.1",  'end': "8.0.0.254"}}

        if (direction == 0):
            src = ip_range['src']
            dst = ip_range['dst']
        else:
            src = ip_range['dst']
            dst = ip_range['src']

        vm = [
            # src                                                            (4)
            STLVmFlowVar(name="src",
                         min_value=src['start'],
                         max_value=src['end'],
                         size=4,op="inc"),
            STLVmWrFlowVar(fv_name="src",pkt_offset= "IP.src"),

            # dst
            STLVmFlowVar(name="dst",
                         min_value=dst['start'],
                         max_value=dst['end'],
                         size=4,op="inc"),
            STLVmWrFlowVar(fv_name="dst",pkt_offset= "IP.dst"),

            # checksum
            STLVmFixIpv4(offset = "IP")
            ]
        return vm

    def create_stream (self, dest_mac=None, port=0):
        size = self.fsize - 4; # HW will add 4 bytes ethernet CRC

        ethr_base = Ether(dst=dest_mac) / IP() / UDP()

        pad = max(0, size - len('ether')) * 'x'
        vm = self.create_vm(port)
        pkt = STLPktBuilder(pkt=ethr_base/pad, vm=vm)

        streams = []
        for pg_id_add in range(0, self.num_streams):
            streams.append(STLStream(packet = pkt, mode = STLTXCont(pps=1), flow_stats = STLFlowStats(pg_id = self.pg_id + pg_id_add)))
        return streams

    def add_streams(self, port, dest_mac):
        if dest_mac:
            logger.info(f"Create stream for port {port} with dest mac {dest_mac}")
        new_stream = self.create_stream(dest_mac, port)
        self.client.add_streams(new_stream, [port])

    def init_streams(self):
        if self.mode == 'direct':
            macs = trexmac.get_cnfappmac_cr_values()
        else:
            macs = os.getenv('LB_MACS', '').split(',')

        if macs:
            logger.info("destination macs available")
            for idx in range(0, len(self.ports)):
                self.add_streams(self.ports[idx], macs[idx])
        else:
            logger.info("destination macs not available")
            for idx in range(0, len(self.ports)):
                self.add_streams(self.ports[idx], None)

    def simple_burst(self):
        passed = True
        try:
            # connect to server
            self.client.connect()

            # prepare our ports
            self.client.reset(ports = self.ports)

            self.init_streams()

            # clear the stats before injecting
            self.client.clear_stats()

            # here we multiply the traffic lineaer to whatever given in rate
            logger.info(f"Running {self.rate} on ports {self.port_a}, {self.port_b} for {self.duration} seconds.")

            self.client.start(ports = self.ports, mult = self.rate,
                duration = self.duration, core_mask = STLClient.CORE_MASK_PIN)

            if self.mode == 'direct':
                self.start_watch()

            trexstats.started(self.profile, self.rate, self.duration)

            # start monitory thread to post stats
            self.start_stats_monitor()

            # block until done
            self.client.wait_on_traffic(ports=self.ports)

            trexstats.force_exit = True

            # read the stats after the test
            stats = self.client.get_stats()
            warnings = self.client.get_warnings()
            passed = trexstats.completed_stats(stats, warnings, self.port_a, self.port_b, self.profile, self.rate, self.duration)

        except STLError as e:
            passed = False
            trexstats.force_exit = True
            logger.error(e)

        finally:
            self.force_exit = True
            self.client.disconnect()

        if passed:
            logger.info("\nTest has passed :-)\n")
            sys.exit(0)
        else:
            logger.error("\nTest has failed :-(\n")
            sys.exit(1)

    def signal_handler(self, sig, frame):
        logger.info("You have pressed Ctrl+C!")
        time.sleep(6)
        self.force_exit = True
        clog.force_exit = True
        sys.exit(0)


def main():
    # run the tests
    packet_size = os.getenv("PACKET_SIZE") or os.getenv("packet_size") or 64
    packet_rate = os.getenv("PACKET_RATE") or os.getenv("packet_rate") or "10pps"
    duration = os.getenv("DURATION") or os.getenv("duration") or -1
    profile = os.environ.get("TREX_PROFILE_NAME")
    if duration != -1:
        duration = int(duration)
    logger.info("Starting burst...")
    logger.info(f"Packet Size - {packet_size}")
    logger.info(f"Packet Rate - {packet_rate}")
    if profile:
        logger.info(f"TRex profile - {profile}")
    if duration == -1:
        logger.info("Packets will be generated forever...")
    try:
        obj = STLS1(ports = [0, 1], size=packet_size, rate=packet_rate, duration=duration, profile=profile)
        obj.simple_burst()
    except Exception as e:
        logger.error(f"failed to start burst: {e}")

if __name__ == "__main__":
    main()
