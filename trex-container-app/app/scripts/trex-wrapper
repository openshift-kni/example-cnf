#!/bin/bash

set -ex

# Start lifecycle webserver in background
/usr/local/bin/webserver 8095 &

# Define the function to add timestamp to log entries
echo_ts() {
  echo "$(date -u +"%Y-%m-%dT%H:%M:%S%z") $@"
}

RUN_DEPLOYMENT=${run_deployment:=1}
SERVER=${TREX_SERVER_URL:="0.0.0.0"}
MODE=${MODE:="direct"}

if [[ "${MODE}" == "direct" ]]; then
  echo_ts "MODE is ${MODE}"
fi

LOG_DIR="/var/log/trex"
[ -d $LOG_DIR ] || mkdir -p $LOG_DIR
rm -rf /var/log/trex/*

# wait for trex server to be ready
count=120
while [[ ${count} -gt 0 ]]; do
    nc -z ${SERVER} 4500 && break || sleep 2
    ((count--))
done
if [[ ${count} -gt 0 ]]; then
    echo_ts "trex-server is ready"
else
    echo_ts "ERROR: trex-server could not start properly, exiting... "
    exit 1
fi

if [ ! -z ${TREX_PROFILE_NAME} ]; then
    if [ -f "/opt/trexprofile/content" ]; then
        # ConfigMap created by example_cnf_deploy Ansible role from redhatci.ocp collection
        ln -s /opt/trexprofile/content "${HOME}/${TREX_PROFILE_NAME}"
    elif [ -f "/opt/trexprofile/${TREX_PROFILE_NAME}" ]; then
        # ConfigMap created by oc/kubectl cli
        ln -s "/opt/trexprofile/${TREX_PROFILE_NAME}" "${HOME}/${TREX_PROFILE_NAME}"
    elif [ -f "/opt/trex/trex-core/scripts/stl/${TREX_PROFILE_NAME}" ]; then
        # No ConfigMap, Use one of trex-core's profile
        ln -s "/opt/trex/trex-core/scripts/stl/${TREX_PROFILE_NAME}" "${HOME}/${TREX_PROFILE_NAME}"
    else
        echo_ts "ERROR: TREX_PROFILE_NAME is defined but could not find valid profiles"
        exit 1
    fi
fi

if [[ $RUN_DEPLOYMENT == "1" ]]; then
    # leave the server running for 10s before starting application
    sleep 10
    echo_ts "Running TRex"
    /usr/local/bin/run-trex
else
    echo_ts "Skipping TRex run, waiting ..."
    sleep infinity
fi
