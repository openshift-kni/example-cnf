#!/usr/bin/env python3

import os
import yaml
import sys
import re
import subprocess
import json

from kubernetes import client, config
from kubernetes.client.rest import ApiException

trex_cfg_template = [{
    "version": 2,
    "interfaces": [],
    "port_info": [],
    "c": 0,
    "platform": {
        "master_thread_id": 0,
        "latency_thread_id": 0,
        "dual_if": [{
            "socket": 0,
            "threads": []
        }]
    }
}]

port_obj_l2_template = {
    "dest_mac": "",
    "src_mac": ""
}

port_obj_l3_template = {
    "dest_mac": "",
    "src_mac": "",
    "default_gw": "",
    "ip": ""
}

CFG_FILE = "/usr/local/bin/example-cnf/trex_cfg.yaml"

def main():
    core_string = ''
    if len(sys.argv) >= 1:
        core_string = sys.argv[1]
        print("INPUT: core_string: %s" % core_string)

    cfg = trex_cfg_template.copy()

    # Ports allocated to TRex
    pci_list = get_pci()
    # TODO: probably this can be removed at some point
    if not pci_list:
        pci_list = get_vfio_pcis()
    cfg[0]['interfaces'].extend([pci.replace('0000:','') for pci in pci_list])
    #cfg[0]['port_limit'] = len(pci_list)

    # TODO: probably this can be removed at some point
    if not core_string:
        numa = get_numa_node(pci_list)
        core_string = get_cores(numa, 6)

    core_list = cores(core_string)

    cfg[0]['c'] = len(core_list) - 2
    cfg[0]['platform']['master_thread_id'] = core_list[0]
    cfg[0]['platform']['latency_thread_id'] = core_list[1]
    cfg[0]['platform']['dual_if'] = []
    for pci in cfg[0]['interfaces']:
        sock = get_pci_sock_info(pci, core_list[2:])
        if not sock:
            print("ERROR: failed to get sock info for pci %s" % pci)
            sys.exit(1)

        match = False
        for item in cfg[0]['platform']['dual_if']:
            if item['socket'] == sock['socket']:
                match = True
                break
        if not match:
            cfg[0]['platform']['dual_if'].append(sock)

    # retrieve source network information
    src_mac = []
    ## Could be empty because we don't use IP addresses for TestPMD
    src_ip = []

    # try to retrieve the source network information from file saving pod annotations
    network_annotation = get_src_network_annotation()
    if network_annotation:
        src_mac = get_src_mac(network_annotation)
        src_ip = get_src_ip(network_annotation)
    else:
        # if not working, then use k8s API
        print("Network annotation is not available, checking net info with k8s API")
        src_mac = get_net_resource_from_k8s_api('mac', 'example-cnf-type=pkt-gen')
        # if we're not able to extract the source MAC address, then exiting
        if not src_mac:
            print("ERROR: Source MAC address is not available, exiting...")
            sys.exit(1)
        # we don't need to check IP address because it could be empty if using TestPMD
        src_ip = get_net_resource_from_k8s_api('ips', 'example-cnf-type=pkt-gen')

    # retrieve destination network information
    dst_mac = []
    ## Could be empty because we don't use IP addresses for TestPMD
    dst_ip = []

    # directly use k8s API
    dst_mac = get_dst_mac()
    print("destination mac fetched")

    if not dst_mac:
        print("ERROR: Destination mac address is not available, exiting...")
        sys.exit(1)

    if len(dst_mac) != len(src_mac):
        print("ERROR: Source (%s) and Destination (%s) mac list size is "
            "different, exiting..." % (','.join(src_mac), ','.join(dst_mac)))
        sys.exit(1)

    if len(pci_list) != len(src_mac):
        print("ERROR: PCI device list (%s) and Source mac (%s) mac list size is "
            "different, exiting..." % (','.join(pci_list), ','.join(dst_mac)))
        sys.exit(1)

    # we don't need to check IP address because it could be empty if using TestPMD
    # but, if length is > 0, we need to check that its length is the same than MAC-related lists
    dst_ip = get_dst_ip()

    if dst_ip:
        if len(dst_ip) != len(src_ip):
            print("ERROR: Source (%s) and Destination (%s) IP list size is "
                "different, exiting..." % (','.join(src_ip), ','.join(dst_ip)))
            sys.exit(1)    

        if len(dst_ip) != len(dst_mac):
            print("ERROR: Dest IP (%s) and Dest MAC (%s) list size is "
                "different, exiting..." % (','.join(dst_ip), ','.join(dst_mac)))
            sys.exit(1)   

    for idx in range(len(pci_list)):
        port_obj = {}
        # depending on whether IP addresses are present or not, we use a different template
        if dst_ip:
            port_obj = port_obj_l3_template.copy()
            port_obj['default_gw'] = dst_ip[idx].split('/')[0]
            port_obj['ip'] = src_ip[idx].split('/')[0]
        else:
            port_obj = port_obj_l2_template.copy()

        port_obj['src_mac'] = src_mac[idx]
        port_obj['dest_mac'] = dst_mac[idx]
        cfg[0]['port_info'].append(port_obj)

    print(trex_cfg_template)
    with open(CFG_FILE, "w") as f:
        yaml.safe_dump(cfg, f)

def get_pci_sock_info(pci, core_list):
    pattern_full = r'\b([0-9a-fA-F]{4}:[0-9a-fA-F]{2}:[0-9a-fA-F]{2}.\d{1}\S*)'
    pattern_partial = r'\b([0-9a-fA-F]{2}:[0-9a-fA-F]{2}.\d{1}\S*)'
    numa_node = "/sys/bus/pci/devices/"
    if re.match(pattern_full, pci):
        numa_node += pci
    elif re.match(pattern_partial, pci):
        numa_node += "0000:" + pci
    else:
        print("ERROR: pci string %s does not match exepected format" % pci)
        return

    numa_node += "/numa_node"
    with open(numa_node) as f:
        sock_num = int(f.read().strip())

    sock_info = {'socket': sock_num, 'threads': []}
    for core in core_list:
        core_sock_num = get_core_sock_num(core)
        if core_sock_num == None:
            print("ERROR: Unable to find sock number for core %s", core)
            return
        elif core_sock_num == sock_num:
            sock_info['threads'].append(core)
    return sock_info

def get_core_sock_num(core):
    files = os.listdir("/sys/devices/system/cpu/cpu" + str(core) + "/")
    pattern = r'node(\d+)'
    for item in files:
        matches = re.match(pattern, item)
        if matches:
            sock = int(matches.group(1))
            return sock

def cores(core_string):
    core_list = []
    for item in core_string.split(','):
        if '-' in item:
            range_parts = item.split('-')
            for c in range(int(range_parts[0]), int(range_parts[1]) + 1):
                core_list.append(c)
        else:
            core_list.append(int(item))
    return core_list

def get_pci():
    networks = os.environ.get('NETWORK_NAME_LIST')
    if not networks:
        return []
    network_list = networks.split(',')
    pci_all = []
    for net in network_list:
        pci_env = "PCIDEVICE_" + net.replace('/', '_').replace('.', '_').upper()
        pcis = os.environ[pci_env]
        print("pcis = %s" % pcis)
        pci_list = pcis.split(',')
        pci_all.extend(pci_list)
    print("get_pci - All PCI addresses captured:", ','.join(pci_all))
    return pci_all

def get_src_network_annotation():
    # object to return
    obj = []
    podinfo = "/etc/podnetinfo/annotations"
    if os.path.exists(podinfo):
        print("get_src_network_annotation - annotations file found")
        with open(podinfo) as f:
            for line in f:
                name, var = line.partition("=")[::2]
                if name == "k8s.v1.cni.cncf.io/networks":
                    obj = yaml.safe_load(yaml.safe_load(var))
                    print("get_src_network_annotation - netinfo found")
    return obj

def get_src_mac(network_annotation):
    # object to return
    macs = []
    for item in network_annotation:
        print(item)
        if 'mac' in item:
            macs.append(item['mac'])
    print("get_src_mac - MACs found:", ','.join(macs))
    return macs

def get_src_ip(network_annotation):
    # object to return
    ips = []
    for item in network_annotation:
        print(item)
        if 'ips' in item:
            # assuming there's only one IP address per interface
            ips.append(item['ips'][0])
    print("get_src_ip - IPs found:", ','.join(ips))
    return ips

def get_dst_mac():
    return get_net_resource_from_k8s_api('mac', 'example-cnf-type=cnf-app')

def get_dst_ip():
    return get_net_resource_from_k8s_api('ips', 'example-cnf-type=cnf-app')

def get_net_resource_from_k8s_api(resource, pod_label):
    resources = []

    config.load_incluster_config()
    v1 = client.CoreV1Api()
    try:
        response = v1.list_namespaced_pod(namespace="example-cnf", label_selector=pod_label)
        # there is only one pod that matches this label, so let's iterate the networks over it
        networks = json.loads(response.items[0].metadata.annotations['k8s.v1.cni.cncf.io/networks'])

        for network in networks:
            print(network)
            # extract the required resource. If it's an IP, we need to check an array
            if resource == "ips":
                if 'ips' in network:
                    print("get_net_resource_from_k8s_api - IP found", network[resource][0])
                    # assuming there's only one IP address per interface
                    resources.append(network[resource][0])
            else:
                print("get_net_resource_from_k8s_api - MAC found", network[resource])
                resources.append(network[resource])

        print("get_net_resource_from_k8s_api - All", resource, "found:", ','.join(resources))
        return resources
    except ApiException as e:
        print(e)
        return []

###########################
def get_vfio_pcis():
    dev = []
    dev_lines = subprocess.check_output(["lspci", "-Dvmmnnk"]).splitlines()
    for dev_line in dev_lines:
        line = dev_line.decode("utf8")
        if 'Slot' in line:
            slot = line.split(':', 1)[1].strip()
        if 'vfio-pci' in line:
            dev.append(slot)
    return dev[:2]

def get_numa_node(pci_list):
    numa_path = "/sys/bus/pci/devices/" + pci_list[0] + "/numa_node"
    with open(numa_path) as f:
        return int(f.read())

def get_cores(numa, count):
    path = "/sys/bus/node/devices/node" + str(numa) + "/cpulist"
    with open(path) as f:
        val = f.read().split(',')[2:count+2]
        return ','.join(val)

###########################

if __name__ == "__main__":
    main()
