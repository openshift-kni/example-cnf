diff --git a/src/dpdk/drivers/bus/pci/linux/pci_vfio.c b/src/dpdk/drivers/bus/pci/linux/pci_vfio.c
index 64cd84a6..03cc98ee 100644
--- a/src/dpdk/drivers/bus/pci/linux/pci_vfio.c
+++ b/src/dpdk/drivers/bus/pci/linux/pci_vfio.c
@@ -149,6 +149,38 @@ pci_vfio_get_msix_bar(int fd, struct pci_msix_table *msix_table)
 	return 0;
 }
 
+/* enable PCI bus memory space */
+static int
+pci_vfio_enable_bus_memory(int dev_fd)
+{
+    uint16_t cmd;
+    int ret;
+
+    ret = pread64(dev_fd, &cmd, sizeof(cmd),
+              VFIO_GET_REGION_ADDR(VFIO_PCI_CONFIG_REGION_INDEX) +
+              PCI_COMMAND);
+
+    if (ret != sizeof(cmd)) {
+        RTE_LOG(ERR, EAL, "Cannot read command from PCI config space!\n");
+        return -1;
+    }
+
+    if (cmd & PCI_COMMAND_MEMORY)
+        return 0;
+
+    cmd |= PCI_COMMAND_MEMORY;
+    ret = pwrite64(dev_fd, &cmd, sizeof(cmd),
+               VFIO_GET_REGION_ADDR(VFIO_PCI_CONFIG_REGION_INDEX) +
+               PCI_COMMAND);
+
+    if (ret != sizeof(cmd)) {
+        RTE_LOG(ERR, EAL, "Cannot write command to PCI config space!\n");
+        return -1;
+    }
+
+    return 0;
+}
+
 /* set PCI bus mastering */
 static int
 pci_vfio_set_bus_master(int dev_fd, bool op)
@@ -427,6 +459,11 @@ pci_rte_vfio_setup_device(struct rte_pci_device *dev, int vfio_dev_fd)
 		return -1;
 	}
 
+        if (pci_vfio_enable_bus_memory(vfio_dev_fd)) {
+                RTE_LOG(ERR, EAL, "Cannot enable bus memory!\n");
+                return -1;
+        }
+
 	/* set bus mastering for the device */
 	if (pci_vfio_set_bus_master(vfio_dev_fd, true)) {
 		RTE_LOG(ERR, EAL, "Cannot set up bus mastering!\n");
